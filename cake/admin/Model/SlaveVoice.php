<?php
APP::uses('AppModel', 'Model');
APP::uses('Security', 'Utility');
APP::uses('Validation', 'Utility');
/**
 * The project of FishSaying is a SNS platform which is
 * based on voice sharing for each other with journey.
 *
 * The RESTful style API is used to communicate with each client-side.
 *
 * PHP 5
 *
 * FishSaying(tm) : FishSaying (http://www.fishsaying.com)
 * Copyright (c) fishsaying.com. (http://fishsaying.com)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) fishsaying.com. (http://www.fishsaying.com)
 * @link http://fishsaying.com FishSaying(tm) Project
 * @since FishSaying(tm) v 0.0.1
 * @license MIT License (http://www.opensource.org/licenses/mit-license.php)
 */

/**
 *
 * @package app.Model
 */
class SlaveVoice extends AppModel {
	var $useDbConfig = 'fishsaying_bak';
	public $primaryKey = '_id';
	protected $tableName = 'voices';
	public $name = 'Voice';
	const STATUS_APPROVED = 1;
	public $results = array();
	public $count = 0;
	public $mongoSchema = array(
		/**
		 * Unique, only six characters, generated by mongoId
		 */
		'short_id'=>array(
			'type'=>'string' 
		), 
		'user_id'=>array(
			'type'=>'string' 
		), 
		'title'=>array(
			'type'=>'string' 
		), 
		/**
		 * It's file key got from QiNiu.com which really hold file itself.
		 *
		 * It includes:
		 * 1. the path of source.
		 * 2. the path of scaled 80 * 80
		 * 3. the path of scaled 160 * 160
		 * 4. the path of scaled 640 * 640
		 */
		'cover'=>array(
			'source'=>array(
				'type'=>'string' 
			), 
			'x80'=>array(
				'type'=>'string' 
			), 
			'x160'=>array(
				'type'=>'string' 
			), 
			'x640'=>array(
				'type'=>'string' 
			) 
		), 
		/**
		 * It's seconds how long voice can play.
		 */
		'length'=>array(
			'type'=>'integer' 
		), 
		/**
		 * Description for voice
		 */
		'description'=>array(
			'type'=>'string' 
		), 
		/**
		 * It's file key got from QiNiu.com which really hold file itself.
		 */
		'voice'=>array(
			'type'=>'string' 
		), 
		/**
		 * The current status of voice
		 */
		'status'=>array(
			'type'=>'integer' 
		), 
		/**
		 * The comment is written by admin when voice status changed to STATUS_INVALID or STATUS_UNAVAILABLE
		 */
		'comment'=>array(
			'type'=>'string' 
		), 
		/**
		 * Whether voice is free or not
		 */
		'isfree'=>array(
			'type'=>'boolean' 
		), 
		'location'=>array(
			'lat'=>array(
				'type'=>'float' 
			), 
			'lng'=>array(
				'type'=>'float' 
			) 
		), 
		/**
		 * The max item is 5 for each voice
		 * Using multi-keys index in mongo
		 * The raw data is string that contains multi tags which is seperated by comma.
		 */
		'tags'=>array(), 
		/**
		 * The detail address of voice
		 */
		'address'=>array(
			'type'=>'string' 
		), 
		/**
		 * The components of detail address for voice
		 */
		'address_components'=>array(
			'type'=>'string' 
		), 
		'language'=>array(
			'type'=>'string' 
		),  // which is language of voice?
		/**
		 * The total of times that voice is bought.
		 */
		'checkout_total'=>array(
			'type'=>'integer' 
		), 
		/**
		 * The total of times voice is played
		 */
		'play_total'=>array(
			'type'=>'integer' 
		), 
		'earn_total'=>array(
			'type'=>'integer' 
		),  // Total of earn
		'score'=>array(
			'type'=>'float' 
		),  // avarage score (0-5)
		/**
		 * How many comments have been submitted on?
		 */
		'comment_total'=>array(
			'type'=>'integer' 
		), 
		'cover_offset_y'=>array(
			'type'=>'double' 
		), 
		'deleted'=>array(
			'type'=>'integer' 
		),  // `1`: deleted already, `0`: not yet
		'packages'=>array(),  // Package list
		'themes'=>array(),  // Theme list
		'recommend'=>array(
			'type'=>'integer' 
		),  // Recommend of editor, 1: recommend it, 0: not yet
		'verified_author'=>array(
			'type'=>'integer' 
		), 
		'created'=>array(
			'type'=>'datetime' 
		), 
		'modified'=>array(
			'type'=>'datetime' 
		) 
	);
	public function __construct($id = false, $table = null, $ds = null) {
		parent::__construct($id, $table, $ds);
		$this->databaseConfig = $this->getDataSource()->config;
	}
	public function paginate() {
		return $this->results;
	}
	
	public function paginateCount() {
		return $this->count;
	}
	public function test(){
		$m = new MongoClient($this->databaseConfig['replicaset']['host']);
		$c = $m->selectDB($this->databaseConfig['database'])->selectCollection($this->tableName);
		//$d= $c->findOne(array('name'=>'645'));
		//print_r($d);
		
	}
	/**
	 * 根据相关ID数组，统计相关字段 这个方法有循环实连数据库的情况，可以改进
	 *
	 * @param array $userIds        	
	 * @param string $field        	
	 */
	public function getRelationStatistics($inIds, $field) {
		$m = new MongoClient($this->databaseConfig['replicaset']['host']);
		$c = $m->selectDB($this->databaseConfig['database'])->selectCollection($this->tableName);
		$ops = array(
			array(
				'$match'=>$inIds 
			), 
			array(
				'$group'=>array(
					'_id'=>null, 
					'total'=>array(
						'$sum'=>'$' . $field 
					) 
				) 
			) 
		);
		//echo json_encode($ops);exit;
		$results = $c->aggregate($ops);
		return isset($results['result'][0]['total']) ? $results['result'][0]['total'] : 0;
	}
}