/*
 * mapper v0.0.1
 * - jQuery plugin for creating soso Maps V3
 *
 * Author - t&zires
 * MIT License: http://www.opensource.org/licenses/mit-license.php
 * More
 * - https://github.com/zires/mapper
 */

(function($) {

    var timeToInteger = function() {
        return (new Date().getTime()) ^ Math.random();
    };

    $.fn.mapper = function(options) {
        // default settings
        var settings = {
            zoomLevel: 15,
            mapType: BMAP_NORMAL_MAP,
            lat: '0',
            lng: '0',
            marker: true,
            infowindow: false,
            control: false
        };

        var dup = [timeToInteger()],
            map = null;

        function addMarker(marker, map) {
            for (i in marker) {
                marker[i].setLabel({
                    label: i
                });
                map.addOverlay(marker[i]);
                if (settings.infowindow) {
                    addInfoWindow(settings, marker[i], map, i);
                }
            }
        };

        function addInfoWindow(options, marker, map, index) {
            var infowindow;
            if (options.infowindow instanceof BMap.InfoWindow) {
                infowindow = options.infowindow;
            } else {
                infowindow = options.infowindow[index];
            }
            marker.addEventListener('click', function(e) {
                this.openInfoWindow(infowindow);
            });
        };


        return this.each(function() {
            // attribute lat and lng
            _default = {};
            if ($(this).attr('data-lat')) {
                _default.lat = $(this).attr('data-lat');
            }
            if ($(this).attr('data-lng')) {
                _default.lng = $(this).attr('data-lng');
            }
            $.extend(settings, _default);
            if (options) {
                $.extend(settings, options);
            }
            //before callback
            if (typeof settings.before == 'function') {
                settings.before.call(this, settings);
            }
            point = new BMap.Point(settings.lng, settings.lat);

            //set diffient id
            if ($(this).attr('id')) {
                id = $(this).attr('id');
            } else {
                rand = dup.pop() + 1;
                id = "mapper_" + rand;
                dup.push(rand);
            }
            $(this).attr('id', id);

            map = new BMap.Map(id);

            // set marker if need
            var marker = [];
            if (settings.marker) {
                if (settings.marker == true) {
                    _marker = new BMap.Marker(point);
                    marker.push(_marker);
                } else if ($.isArray(settings.marker)) {
                    marker = settings.marker;
                } else {
                    marker.push(settings.marker);
                }
                addMarker(marker, map);
            };

            map.centerAndZoom(point, settings.zoomLevel);
            map.enableScrollWheelZoom();

            if (settings.control == true) {
                map.addControl(new BMap.NavigationControl());
            }

            //after callback
            if (typeof settings.after == 'function') {
                settings.after.call(this, map);
            }


        });
    };

})(jQuery);
